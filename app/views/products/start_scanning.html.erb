<div class="container">
  <p id="notice"><%= notice %></p>

  <div id='barcode-scanner'></div>
  <button class="btn btn-primary" id="scan-more-item">Resfesh Scanner</button>
  <br>
  <br>

  <div>
    <input type="text" name="" placeholder="Enter SKU" id="manual-sku-code"><button id="manual-entry" style="margin-bottom: 4px;margin-left: 4px;" class="btn btn-primary btn-sm">Manual Entry</button>
  </div>
  <form id="order-form" action="/products/create_order" method="get">
    <table class="table">
      <thead>
        <tr>
          <td>SKU</td>
          <td>Quantity</td>
          <td>Price</td>
          <td>Total</td>
        </tr>
      </thead>
      <tbody id="scanned-item-body">
      </tbody>
    </table>
    <strong>
      <span style="float: right;margin-right: 4%;" id="rows_subtotal">Subtotal: <b></b></span>
    </strong>
    <br>
    <br>
    <button type="submit" class="btn btn-primary" id="create-order">Create Order</button>
  </form>
</div>

<script type="text/javascript">

  $("#manual-sku-code").on('keyup', function (e) {
      if (e.keyCode === 13) {
        $("#manual-entry").trigger('click');
      }
  });
  
  $("#manual-entry").click(function(){
    $.ajax({
      type: "POST",
      url: '/products/get_barcode_from_sku',
      data: { barcode:  $("#manual-sku-code").val()},
      success: function(res){
        if(res.status == 200){
          var product_db_id
          var inventory_qty;
          var actual_qty;
          var inventory_qty;
          var row_exist = false;
          var rows_subtotal = 0.0;
          $('#scanned-item-body tr').each(function(){
            product_db_id = $(this).find("#product_db_id");
            if(product_db_id.length > 0){
              if(parseInt(product_db_id.val()) == parseInt(res.data['id'])){
                row_exist = true;
                inventory_qty = $(this).find("#inventory-qty");
                actual_qty = $(this).find("#actual_qty");
                if(parseInt(inventory_qty.val()) + 1 > parseInt(actual_qty.val())){
                  alert("Inventory max limit reach");
                }else{
                  inventory_qty.val(parseInt(inventory_qty.val()) + 1)
                  var total = parseFloat(inventory_qty.val()) * parseFloat(res.data['price'])
                  $(this).find("#subtotal").text(total.toFixed(2));
                  $(this).find("#subtotal-input").val(total.toFixed(2));
                }
               return false;
              }
            }
          });

          if(!row_exist && parseInt(res.data['inventory']) > 0){
            row ='<tr><td>'+ res.data['model_number'] +'</td> <td> <input type="number" name="new_qty[]" class="form-control" value="1" id="inventory-qty" max="'+ res.data['inventory'] +'" required="true"> <input type="hidden" name="actual_qty[]" id="actual_qty" value="'+ res.data['inventory'] +'" class="form-control"> <input type="hidden" name="variant_id[]" id="variant_id" value="'+ res.data['variant_id'] +'" class="form-control"> <input type="hidden" name="product_id[]" id="product_id" value="'+ res.data['shopify_product_id'] +'" class="form-control"> <input type="hidden" name="product_db_id[]" id="product_db_id" value="'+ res.data['id'] +'" class="form-control"> </td><td> <input class="form-control" type="number" min="0" step=".01" value="'+ res.data['price'] +'" id="variant-price"> </td><td> <input type="hidden" name="subtotal[]" value="" id="subtotal-input">total: <b><span id="subtotal">'+ res.data['price'] +'</span></b></td></tr>';
              $('#scanned-item-body').append(row);
          }

          if(parseInt(res.data['inventory']) == 0){
            alert("You dont have enough inventory for this item");
          }

          $("#rows_subtotal").show();
          $('#scanned-item-body tr').each(function(){
            rows_subtotal = rows_subtotal + parseFloat($(this).find("#subtotal").text());
          });

          $("#rows_subtotal b").text(rows_subtotal.toFixed(2));
          $("#start-scanning").hide();
        }
        else{
          alert("Item not found");
        }
      }
    });
  });

  $("#rows_subtotal").hide();
  $('body').on('keyup', '#inventory-qty, #variant-price', function(){
    var row = $(this).parent().parent();
    var rows_subtotal = 0.0;
    var attribute_id = $(this).attr('id')
    if (attribute_id == 'inventory-qty')
      var total = parseFloat($(this).val()) * parseFloat(row.find("#variant-price").val());
    else
      var total = parseFloat($(this).val()) * parseFloat(row.find("#inventory-qty").val());
    if(isNaN(total)) {
      row.find("#subtotal").text("0.0");
    }
    else if(attribute_id == 'inventory-qty' && parseInt($(this).val()) > parseInt(row.find("#actual_qty").val())){
      alert("Quantity can not be greater than available qty " + row.find("#actual_qty").val());
      $(this).val(row.find("#actual_qty").val());
      var greater_qty = parseFloat(row.find("#actual_qty").val()) * parseFloat(row.find("#variant-price").val());
      greater_qty
      row.find("#subtotal").text(greater_qty);
      row.find("#subtotal-input").val(greater_qty);
    }
    else{
      row.find("#subtotal").text(total);
      row.find("#subtotal-input").val(total);
    }

    $('#scanned-item-body tr').each(function(){
      rows_subtotal = rows_subtotal + parseFloat($(this).find("#subtotal").text());
    });

    $("#rows_subtotal b").text(rows_subtotal.toFixed(2));
  });  

  function order_by_occurrence(arr) {
    var counts = {};
    arr.forEach(function(value){
        if(!counts[value]) {
            counts[value] = 0;
        }
        counts[value]++;
    });

    return Object.keys(counts).sort(function(curKey,nextKey) {
        return counts[curKey] < counts[nextKey];
    });
  }

  function load_quagga(){
    if ($('#barcode-scanner').length > 0 && navigator.mediaDevices && typeof navigator.mediaDevices.getUserMedia === 'function') {

      var last_result = [];
      if (Quagga.initialized == undefined) {
        Quagga.onDetected(function(result) {
          var last_code = result.codeResult.code;
          last_result.push(last_code);
          if(result.codeResult.code) {
            $("#start-scanning").hide();
            Quagga.stop();
            $.ajax({
              type: "POST",
              url: '/products/get_barcode',
              data: { barcode: result.codeResult.code },
              success: function(res){
                if(res.status == 200){
                  var product_db_id
                  var inventory_qty;
                  var actual_qty;
                  var inventory_qty;
                  var row_exist = false;
                  var rows_subtotal = 0.0;
                  $('#scanned-item-body tr').each(function(){
                    product_db_id = $(this).find("#product_db_id");
                    if(product_db_id.length > 0){
                      if(parseInt(product_db_id.val()) == parseInt(res.data['id'])){
                        row_exist = true;
                        inventory_qty = $(this).find("#inventory-qty");
                        actual_qty = $(this).find("#actual_qty");
                        if(parseInt(inventory_qty.val()) + 1 > parseInt(actual_qty.val())){
                          alert("Inventory max limit reach");
                        }else{
                          inventory_qty.val(parseInt(inventory_qty.val()) + 1)
                          var total = parseFloat(inventory_qty.val()) * parseFloat(res.data['price'])
                          $(this).find("#subtotal").text(total.toFixed(2));
                          $(this).find("#subtotal-input").val(total.toFixed(2));
                        }
                       return false;
                      }
                    }
                  });

                  if(!row_exist && parseInt(res.data['inventory']) > 0){
                    row ='<tr><td>'+ res.data['model_number'] +'</td> <td> <input type="number" name="new_qty[]" class="form-control" value="1" id="inventory-qty" max="'+ res.data['inventory'] +'" required="true"> <input type="hidden" name="actual_qty[]" id="actual_qty" value="'+ res.data['inventory'] +'" class="form-control"> <input type="hidden" name="variant_id[]" id="variant_id" value="'+ res.data['variant_id'] +'" class="form-control"> <input type="hidden" name="product_id[]" id="product_id" value="'+ res.data['shopify_product_id'] +'" class="form-control"> <input type="hidden" name="product_db_id[]" id="product_db_id" value="'+ res.data['id'] +'" class="form-control"> </td><td> <input class="form-control" type="number" min="0" step=".01" value="'+ res.data['price'] +'" id="variant-price"> </td><td> <input type="hidden" name="subtotal[]" value="" id="subtotal-input">total: <b><span id="subtotal">'+ res.data['price'] +'</span></b></td></tr>';
                      $('#scanned-item-body').append(row);
                  }

                  if(parseInt(res.data['inventory']) == 0){
                    alert("You dont have enough inventory for this item");
                  }

                  $("#rows_subtotal").show();
                  $('#scanned-item-body tr').each(function(){
                    rows_subtotal = rows_subtotal + parseFloat($(this).find("#subtotal").text());
                  });

                  $("#rows_subtotal b").text(rows_subtotal.toFixed(2));
                  $("#start-scanning").hide();
                  setTimeout(function(){
                    load_quagga();
                  }, 1000);
                }
                else{
                  alert("There was an error while scanning please refresh scanner by pressing refresh scanner button");
                }
              }
            });
          } 
          else {
              alert("Please Scan again by refreshing your page");
          }
        });
      }

      Quagga.init({
        inputStream : {
          name : "Live",
          type : "LiveStream",
          numOfWorkers: 0,
          target: document.querySelector('#barcode-scanner'),
            constraints: {
              width: 600,
              height: 600,
              facing: "environment" // or user
          }
        },
        decoder: {
            readers : ['ean_reader','ean_8_reader','code_39_reader','code_39_vin_reader','codabar_reader','upc_reader','upc_e_reader','code_128_reader']
        }
      },function(err) {
          if (err) { console.log(err); return }
          Quagga.initialized = true;
          Quagga.start();
      });

    }
  };
  $("#scan-more-item").click(function(){
    $("#start-scanning").show();
    load_quagga();
  });
  $(document).on('turbolinks:load', load_quagga);
</script>

<style type="text/css">
  #barcode-scanner canvas.drawingBuffer, #barcode-scanner video.drawingBuffer {
    display: none;
  }

  #barcode-scanner canvas, #barcode-scanner video {
    width: 100%;
    height: auto;
  }
</style>
