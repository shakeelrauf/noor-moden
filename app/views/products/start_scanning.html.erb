<div class="container">
  <p id="notice"><%= notice %></p>

  <div id='barcode-scanner'></div>
  <button class="btn btn-primary" id="scan-more-item">Resfesh Scanner</button>
  <br>
  <hr>
  <br>
  <input type="radio" class="check_radio_status" id="order" name="order" value="order" checked>
  <label for="order">Order</label>
  <input type="radio" class="check_radio_status" id="reservation" name="order" value="reservation">
  <label for="reservation">Reservation</label><br><br>


  <div class="manual-entry-row">
   
    <div>
      <input type="text" name="" placeholder="Enter SKU" id="manual-sku-code"><button id="manual-entry" style="margin-bottom: 4px;margin-left: 4px;" class="btn btn-primary btn-sm">Manual Entry</button>
    </div>
    <div style="margin-left:17%">
      <select name="paid_type" id="paid_type" class="form-control" style="height: 31px;">
        <option value="Cash (Black Sale)">Cash (Black Sale)</option>
        <option value="Invoice Cash (white sale)">Invoice Cash (white sale)</option>
        <option value="Invoice Card (white sale)">Invoice Card (white sale)</option>
      </select>
    </div>
     <div style="margin-left:1%">
        <input type="text" id="" class="pick_value_date"   data-provide='datepicker' placeholder="Set Reservation Expiry Date"  >
    </div>
    
    <div>
      <input class="order-name" type="text" placeholder="Enter Order Name">
    </div>
  </div>
    <form  id="order-form" action="/products/create_order" method="get">
      <table class="table">
        <thead>
          <tr>
            <td>SKU</td>
            <td>Quantity</td>
            <td>Price</td>
            <td>Total</td>
            <td></td>
          </tr>
        </thead>
        <tbody id="scanned-item-body">
        
        </tbody>
      </table>
      <strong>
        <span style="float: right;margin-right: 4%;" id="rows_subtotal">Subtotal: <b></b></span>
        <br>
        <span style="float: right;margin-right: 4%;" id="rows_subquantity">Total Quantity: <b></b></span>
      </strong>
      <br>
      <br>
      <input type="text" style="display:none;" name="paidtype" id="paidtype">
      <%= check_box :reserve_status,false%> 
      <input type="text" style="display: none;"  id="reservation_expiry_date"  name="reservation_expiry_date[]" data-provide='datepicker' placeholder="Set Reservation Expiry Date" >
      <input style="display: none;" class="order-name-input" type="text" name="label" placeholder="Enter Order Name">      
      <%= hidden_field_tag "random_token", session[:create_order_random_token] %>
      <button type="submit" class="btn btn-primary" id="create-order" data-disable-with="Processing...">Submit</button>
    </form> 
</div>

<script type="text/javascript">
  $("#manual-sku-code").on('keyup', function (e) {
      if (e.keyCode === 13) {
        $("#manual-entry").trigger('click');
        $(this).select();
      }
  });

  $('.order-name').on('keyup', function(){
    $('.order-name-input').val($(this).val())
  });
  $(".pick_value_date").on("input", function() {
  console.log("running")
    $('#reservation_expiry_date').val($(this).val())
});
  function remove(elmnt){
    // id = $(elmnt).parent().parent().attr('id')
    $(elmnt).parent().parent().remove()
    // $(`#${id}`).remove();
    var rows_subtotal = 0.0;
    var rows_subquantity = 0;
    $('#scanned-item-body tr').each(function(){
      rows_subtotal = rows_subtotal + parseFloat($(this).find("#subtotal").text());
      rows_subquantity = rows_subquantity + parseInt($(this).find("#inventory-qty")[0].value);
    });
    $("#rows_subtotal b").text(rows_subtotal.toFixed(2));
    $("#rows_subquantity b").text(rows_subquantity);
  }

  $("#manual-entry").click(function(){
    $.ajax({
      type: "POST",
      url: '/products/get_barcode_from_sku',
      data: { barcode:  $("#manual-sku-code").val()},
      success: function(res){
        if(res.status == 200){
          var product_db_id
          var inventory_qty;
          var actual_qty;
          var inventory_qty;
          var row_exist = false;
          var rows_subtotal = 0.0;
          var rows_subquantity = 0;
          console.log("data",res)
          $('#scanned-item-body tr').each(function(){
            product_db_id = $(this).find("#product_db_id");
            if(product_db_id.length > 0){
              if(parseInt(product_db_id.val()) == parseInt(res.data['id']) && $(product_db_id).attr('data-price-changed') == "false"){
                row_exist = true;
                inventory_qty = $(this).find("#inventory-qty");
                actual_qty = $(this).find("#actual_qty");
                if(parseInt(inventory_qty.val()) + 1 > parseInt(actual_qty.val())){
                  alert("Inventory max limit reach");
                }else{
                  inventory_qty.val(parseInt(inventory_qty.val()) + 1)
                  // var total = parseFloat(inventory_qty.val()) * parseFloat(res.data['price'])
                  var total = parseFloat(inventory_qty.val()) * parseFloat($(".variant-price-"+ res.data['model_number'].replace(/[_\W]+/g, "-")).val())
                  $(this).find("#subtotal").text(total.toFixed(2));
                  $(this).find("#subtotal-input").val(total.toFixed(2));
                }
               return false;
              }
            }
          });

          if(!row_exist && parseInt(res.data['inventory']) > 0){
            row ='<tr id=row_' + res.data['id'] + '><td>'+ res.data['model_number'] +'</td> <td> <input type="number" name="new_qty[]" class="form-control" value="1" id="inventory-qty" max="'+ res.data['inventory'] +'" required="true"> <input type="hidden" name="actual_qty[]" id="actual_qty" value="'+ res.data['inventory'] +'" class="form-control"> <input type="hidden" name="variant_id[]" id="variant_id" value="'+ res.data['variant_id'] +'" class="form-control"> <input type="hidden" name="product_id[]" id="product_id" value="'+ res.data['shopify_product_id'] +'" class="form-control"> <input type="hidden" name="product_db_id[]" id="product_db_id" value="'+ res.data['id'] +'" class="form-control" data-org-price="'+ res.data['price'] +'" data-price-changed="false"> </td><td> <input class="form-control variant-price-'+ res.data['model_number'].replace(/[_\W]+/g, "-") +'" type="number" min="0" step=".01" value="'+ res.data['price'] +'" name="line_item_price[]" id="variant-price" data-org-price="'+ res.data['price'] +'"> </td><td> <input type="hidden" name="subtotal[]" value="'+ res.data['price'] +'" id="subtotal-input">total: <b><span id="subtotal">'+ res.data['price'] +'</span></b></td> <td><a class="delete-link" onclick="remove(this)"><i class="fa fa-close"></i></a></td></tr>';
            $('#scanned-item-body').prepend(row);
             if($('#reservation').is(':checked')){
                $("#reserve_status_false").prop('checked', true);
               }else{
                 $("#reserve_status_false").prop('checked', false);
               }
          }
          if(parseInt(res.data['inventory']) == 0){
            alert("You dont have enough inventory for this item");
          }

          $("#rows_subtotal").show();
          $("#rows_subquantity").show();
          $('#scanned-item-body tr').each(function(){
            rows_subtotal = rows_subtotal + parseFloat($(this).find("#subtotal").text());
            rows_subquantity = rows_subquantity + parseInt($(this).find("#inventory-qty")[0].value);
          });

          $("#rows_subtotal b").text(rows_subtotal.toFixed(2));
          $("#rows_subquantity b").text(rows_subquantity);
          $("#start-scanning").hide();
        }
        else{
          alert("Item not found");
        }
      }
    });
  });


  $("#rows_subtotal").hide();
  $("#rows_subquantity").hide();
  $('body').on('keyup', '#variant-price', function(){
    var prd_db = $(this).parent().parent().find("#product_db_id");
    if($(this).val() != $(this).attr('data-org-price')){
      $(prd_db).attr('data-price-changed', "true");
    }
    else{
      $(prd_db).attr('data-price-changed', "false");
    }
  });
  $('body').on('keyup', '#inventory-qty, #variant-price', function(){
    var row = $(this).parent().parent();
    var rows_subtotal = 0.0;
    var rows_subquantity = 0.0;
    var attribute_id = $(this).attr('id')
    if (attribute_id == 'inventory-qty')
      var total = parseFloat($(this).val()) * parseFloat(row.find("#variant-price").val());
    else
      var total = parseFloat($(this).val()) * parseFloat(row.find("#inventory-qty").val());
    if(isNaN(total)) {
      row.find("#subtotal").text("0.0");
    }
    else if(attribute_id == 'inventory-qty' && parseInt($(this).val()) > parseInt(row.find("#actual_qty").val())){
      alert("Quantity can not be greater than available qty " + row.find("#actual_qty").val());
      $(this).val(row.find("#actual_qty").val());
      var greater_qty = parseFloat(row.find("#actual_qty").val()) * parseFloat(row.find("#variant-price").val());
      greater_qty
      row.find("#subtotal").text(greater_qty);
      row.find("#subtotal-input").val(greater_qty);
    }
    else{
      row.find("#subtotal").text(total);
      row.find("#subtotal-input").val(total);
    }

    $('#scanned-item-body tr').each(function(){
      rows_subtotal = rows_subtotal + parseFloat($(this).find("#subtotal").text());
      quantity = parseInt($(this).find("#inventory-qty")[0].value);
      if (isNaN(quantity)) {
        quantity = 0
      }
      rows_subquantity = rows_subquantity + quantity;
    });

    $("#rows_subtotal b").text(rows_subtotal.toFixed(2));
    $("#rows_subquantity b").text(rows_subquantity);
  });  

  function order_by_occurrence(arr) {
    var counts = {};
    arr.forEach(function(value){
        if(!counts[value]) {
            counts[value] = 0;
        }
        counts[value]++;
    });

    return Object.keys(counts).sort(function(curKey,nextKey) {
        return counts[curKey] < counts[nextKey];
    });
  }

  function load_quagga(){
    if ($('#barcode-scanner').length > 0 && navigator.mediaDevices && typeof navigator.mediaDevices.getUserMedia === 'function') {

      var last_result = [];
      if (Quagga.initialized == undefined) {
        Quagga.onDetected(function(result) {
          var last_code = result.codeResult.code;
          last_result.push(last_code);
          if(result.codeResult.code) {
            $("#start-scanning").hide();
            Quagga.stop();
            $.ajax({
              type: "POST",
              url: '/products/get_barcode',
              data: { barcode: result.codeResult.code },
              success: function(res){
                if(res.status == 200){
                  var product_db_id
                  var inventory_qty;
                  var actual_qty;
                  var inventory_qty;
                  var row_exist = false;
                  var rows_subtotal = 0.0;
                  $('#scanned-item-body tr').each(function(){
                    product_db_id = $(this).find("#product_db_id");
                    if(product_db_id.length > 0){
                      if(parseInt(product_db_id.val()) == parseInt(res.data['id']) && $(product_db_id).attr('data-price-changed') == "false"){
                        row_exist = true;
                        inventory_qty = $(this).find("#inventory-qty");
                        actual_qty = $(this).find("#actual_qty");
                        if(parseInt(inventory_qty.val()) + 1 > parseInt(actual_qty.val())){
                          alert("Inventory max limit reach");
                        }else{
                          inventory_qty.val(parseInt(inventory_qty.val()) + 1)
                          // var total = parseFloat(inventory_qty.val()) * parseFloat(res.data['price'])
                        var total = parseFloat(inventory_qty.val()) * parseFloat($(".variant-price-"+ res.data['model_number']).replace(/[_\W]+/g, "-").val())
                          $(this).find("#subtotal").text(total.toFixed(2));
                          $(this).find("#subtotal-input").val(total.toFixed(2));
                        }
                       return false;
                      }
                    }
                  });

                  if(!row_exist && parseInt(res.data['inventory']) > 0){
                    row ='<tr id=row_' + res.data['id'] + '><td>'+ res.data['model_number'] +'</td> <td> <input type="number" name="new_qty[]" class="form-control" value="1" id="inventory-qty" max="'+ res.data['inventory'] +'" required="true"> <input type="hidden" name="actual_qty[]" id="actual_qty" value="'+ res.data['inventory'] +'" class="form-control"> <input type="hidden" name="variant_id[]" id="variant_id" value="'+ res.data['variant_id'] +'" class="form-control"> <input type="hidden" name="product_id[]" id="product_id" value="'+ res.data['shopify_product_id'] +'" class="form-control"> <input type="hidden" name="product_db_id[]" id="product_db_id" value="'+ res.data['id'] +'" class="form-control" data-org-price="'+ res.data['price'] +'" data-price-changed="false"> </td><td> <input class="form-control" type="number" min="0" step=".01" value="'+ res.data['price'] +'" name="line_item_price[]" id="variant-price"  data-org-price="'+ res.data['price'] +'"> </td><td> <input type="hidden" name="subtotal[]" value="'+ res.data['price'] +'" id="subtotal-input">total: <b><span id="subtotal">'+ res.data['price'] +'</span></b></td> <td><a class="delete-link" onclick="remove(this)"><i class="fa fa-close"></i></a></td></tr>';
                    $('#scanned-item-body').prepend(row);
                  }

                  if(parseInt(res.data['inventory']) == 0){
                    alert("You dont have enough inventory for this item");
                  }

                  $("#rows_subtotal").show();
                  $("#rows_subquantity").show();
                  $('#scanned-item-body tr').each(function(){
                    rows_subtotal = rows_subtotal + parseFloat($(this).find("#subtotal").text());
                    rows_subquantity = rows_subquantity + parseInt($(this).find("#inventory-qty")[0].value);
                  });

                  $("#rows_subtotal b").text(rows_subtotal.toFixed(2));
                  $("#rows_subquantity b").text(rows_subquantity);
                  $("#start-scanning").hide();
                  setTimeout(function(){
                    load_quagga();
                  }, 1000);
                }
                else{
                  alert("There was an error while scanning please refresh scanner by pressing refresh scanner button");
                }
              }
            });
          } 
          else {
              alert("Please Scan again by refreshing your page");
          }
        });
      }

      Quagga.init({
        inputStream : {
          name : "Live",
          type : "LiveStream",
          numOfWorkers: 0,
          target: document.querySelector('#barcode-scanner'),
            constraints: {
              width: 600,
              height: 600,
              facing: "environment" // or user
          }
        },
        decoder: {
            readers : ['ean_reader','ean_8_reader','code_39_reader','code_39_vin_reader','codabar_reader','upc_reader','upc_e_reader','code_128_reader']
        }
      },function(err) {
          if (err) { console.log(err); return }
          Quagga.initialized = true;
          Quagga.start();
      });

    }
  };
  $("#scan-more-item").click(function(){
    $("#start-scanning").show();
    load_quagga();
  });
  $(document).on('turbolinks:load', load_quagga);

  $(document).ready(function () {
    $('#manual-sku-code').autocomplete({
      source: '/modelnumbers'
    })
  }); 
  $("#reserve_status_false").hide();
  $('.check_radio_status').click(function() {
    if($('#reservation').is(':checked')){
      $("#reserve_status_false").prop('checked', true);
      $("#reservation_expiry_date").prop('required',true);
      $(".pick_value_date").prop('required',true);
    } 
    else{
      $("#reserve_status_false").prop('checked', false);
      $("#reservation_expiry_date").prop('required',false);
      $(".pick_value_date").prop('required',false);
    }
  });
  $('#reservation_expiry_date').datepicker('setStartDate', new Date());
  $('.pick_value_date').datepicker('setStartDate', new Date());
  $(".pick_value_date").datepicker().on("changeDate", function(e) {
       var check= $("#reservation_expiry_date").val($(this).val())
      //  console.log("value changed",check[0].value) 
  });
 $("#order-form").on("submit", function(){
   var paid_value=$("#paid_type")[0].value
   $("#paidtype")[0].value=paid_value
    if($('#reservation').is(':checked')){
      console.log("reserved!")  
    } 
    else{
      $("#reservation_expiry_date")[0].value = ""
    }
 })
 $("#create-order").click(function(){
  if($('#reservation').is(':checked')){
        console.log("checked!")
      if ($(".pick_value_date")[0].value == "")
      {
        alert("Expiry Date Required")
      }

      }

 })
</script>

<style type="text/css">
  #barcode-scanner canvas.drawingBuffer, #barcode-scanner video.drawingBuffer {
    display: none;
  }

  #barcode-scanner canvas, #barcode-scanner video {
    width: 100%;
    height: auto;
  }

  .delete-link {
    cursor: pointer;
  }

  .manual-entry-row {
    display: flex;
    justify-content: space-between;
  }

</style>
